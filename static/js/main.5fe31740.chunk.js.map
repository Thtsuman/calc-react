{"version":3,"sources":["components/button/button.component.jsx","App.js","components/input/input.component.jsx","components/clear-button/clear-button.component.jsx","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","App","state","input","addToInput","setState","handleEqual","eval","handleMultiply","replace","handleBackspace","slice","this","handleClear","React","Component","Input","ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAA,0BAgBeA,IATA,SAACC,GAAD,OACX,yBAAKC,UAAS,gDALEC,EAMaF,EAAMG,SAL3BC,MAAMF,IAAgB,MAARA,GAAuB,MAARA,EAKiB,WAAP,OAC3CG,QAAS,kBAAML,EAAMM,YAAYN,EAAMG,YAEtCH,EAAMG,UATI,IAACD,I,k6CCKdK,I,msBAEJC,MAAQ,CACNC,MAAO,I,MAGTC,WAAa,SAACR,GACZ,MAAKS,SAAS,CAAEF,MAAO,MAAKD,MAAMC,MAAQP,K,MAG5CU,YAAc,WACZ,MAAKD,SAAS,CAAEF,MAAOI,KAAK,MAAKL,MAAMC,U,MAGzCK,eAAiB,SAAAZ,GACH,MAARA,GACF,MAAKS,SAAS,CAAEF,MAAO,MAAKD,MAAMC,MAAQP,EAAIa,QAAQ,IAAK,Q,MAI/DC,gBAAkB,WAChB,MAAKL,SAAS,CAAEF,MAAO,MAAKD,MAAMC,MAAMQ,MAAM,GAAI,M,oVAI1C,IAAD,OACP,OACE,kEAAKhB,UAAU,OACb,kEAAKA,UAAU,gBACb,2DAAC,iEAAD,CAAOQ,MAAOS,KAAKV,MAAMC,QACzB,kEAAKR,UAAU,OACb,2DAAC,mEAAD,CAAQK,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,MAEF,kEAAKT,UAAU,OACb,2DAAC,mEAAD,CAAQK,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKJ,gBAA1B,MAEF,kEAAKb,UAAU,OACb,2DAAC,mEAAD,CAAQK,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,MAEF,kEAAKT,UAAU,OACb,2DAAC,mEAAD,CAAQK,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAaY,KAAKR,YAA1B,KACA,2DAAC,mEAAD,CAAQJ,YAAa,kBAAM,EAAKM,gBAAhC,KACA,2DAAC,mEAAD,CAAQN,YAAaY,KAAKR,YAA1B,MAEF,kEAAKT,UAAU,OACb,2DAAC,+EAAD,CAAakB,YAAa,kBAAM,EAAKR,SAAS,CAAEF,MAAO,OAAvD,SACA,2DAAC,mEAAD,CAAQH,YAAaY,KAAKF,iBAA1B,Y,KAxDMI,6CAAMC,WAgETd,2B,gCCxEf,0BASee,IAND,SAACtB,GAAD,OACV,yBAAKC,UAAU,iBACVD,EAAMS,S,6BCLf,0BAOec,IAJK,SAACvB,GAAD,OAChB,yBAAKC,UAAU,YAAYI,QAASL,EAAMmB,aAAcnB,EAAMG,Y,wNCQ9CqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACvB,EAAA,EAAD,MAASwB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5fe31740.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.style.css';\r\n\r\nconst isOperator = (val) => {\r\n    return !isNaN(val) || val === '.' || val === '=';\r\n}\r\n\r\nconst Button = (props) => (\r\n    <div className={`button-wrapper \r\n                    ${isOperator(props.children) ? null : \"operator\"}`}\r\n        onClick={() => props.handleClick(props.children)}\r\n    >\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default Button;","import React from 'react';\nimport './App.css';\nimport * as math from 'mathjs';\n\nimport Button from './components/button/button.component';\nimport Input from './components/input/input.component';\nimport ClearButton from './components/clear-button/clear-button.component';\n\nclass App extends React.Component {\n\n  state = {\n    input: ''\n  }\n\n  addToInput = (val) => {\n    this.setState({ input: this.state.input + val });\n  }\n\n  handleEqual = () => {\n    this.setState({ input: eval(this.state.input) })\n  }\n\n  handleMultiply = val => {\n    if (val === \"x\") {\n      this.setState({ input: this.state.input + val.replace(\"x\", \"*\") });\n    }\n  }\n\n  handleBackspace = () => {\n    this.setState({ input: this.state.input.slice(0, -1) })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input}></Input>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.handleMultiply}>x</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={() => this.handleEqual()}>=</Button>\n            <Button handleClick={this.addToInput}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({ input: '' })}>Clear</ClearButton>\n            <Button handleClick={this.handleBackspace}>C</Button>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './input.style.css';\r\n\r\nconst Input = (props) => (\r\n    <div className=\"input-wrapper\">\r\n        {props.input}\r\n    </div>\r\n);\r\n\r\nexport default Input;","import React from 'react';\r\nimport './clear-button.style.css';\r\n\r\nconst ClearButton = (props) => (\r\n    <div className=\"clear-btn\" onClick={props.handleClear}>{props.children}</div>\r\n);\r\n\r\nexport default ClearButton;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}